BFS DFS 
#include <stdio.h>

int no_of_vertices = 0;

void printGraph(int matrix[][no_of_vertices]) {
    for (int i = 0; i < no_of_vertices; i++) {
        for (int j = 0; j < no_of_vertices; j++) {
            printf("%d", matrix[i][j]);
        }
        printf("\n");
    }
}

void bfs(int matrix[][no_of_vertices], int start) {
    int visited[no_of_vertices], queue[no_of_vertices], front = 0, rear = -1;
    for (int i = 0; i < no_of_vertices; i++) {
        visited[i] = 0;
    }
    queue[++rear] = start;
    visited[start] = 1;
    while (front <= rear) {
        start = queue[front++];
        printf("%d ", start);
        for (int i = 0; i < no_of_vertices; i++) {
            if (matrix[start][i] && !visited[i]) {
                queue[++rear] = i;
                visited[i] = 1;
            }
        }
    }
}

void dfs(int matrix[][no_of_vertices], int start, int visited[]) {
    printf("%d ", start);
    visited[start] = 1;
    for (int i = 0; i < no_of_vertices; i++) {
        if (matrix[start][i] && !visited[i]) {
            dfs(matrix, i, visited);
        }
    }
}

int main() {
    int s = 0, d = 0, ch, start = 0, graph_type = 0;
    printf("\nEnter the no. of vertices: ");
    scanf("%d", &no_of_vertices);
    printf("Enter 1 for directed graph or 2 for undirected graph: ");
    scanf("%d", &graph_type);
    int matrix[no_of_vertices][no_of_vertices], visited[no_of_vertices];
    for (int i = 0; i < no_of_vertices; i++) {
        for (int j = 0; j < no_of_vertices; j++) {
            matrix[i][j] = 0;
        }
        visited[i] = 0;
    }
    do {
        printf("Enter an Edge from node (0 to %d) to node (0 to %d) (enter -1 -1 to stop): ", no_of_vertices - 1, no_of_vertices - 1);
        scanf("%d%d", &s, &d);
        if (s >= 0 && d >= 0 && s < no_of_vertices && d < no_of_vertices) {
            if (graph_type == 1) { // directed graph
                matrix[s][d] = 1;
            } else if (graph_type == 2) { // undirected graph
                matrix[s][d] = 1;
                matrix[d][s] = 1;
            }
        } else if (s != -1 && d != -1) {
            printf("Invalid input. Please enter valid vertices.\n");
        }
    } while (s != -1 && d != -1);
    do {
        printf("\nEnter 1 for BFS\nEnter 2 for DFS\nEnter 3 for printing adjacency matrix\nEnter 4 to Exit : ");
        scanf("%d", &ch);
        switch (ch) {
            case 1:
                printf("Enter the Vertex from which you want to start: ");
                scanf("%d", &start);
                if (start >= 0 && start < no_of_vertices) {
                    bfs(matrix, start);
                } else {
                    printf("Invalid input. Please enter a valid starting vertex.\n");
                }
                break;
            case 2:
                printf("Enter the Vertex from which you want to start: ");
                scanf("%d", &start);
                if (start >= 0 && start < no_of_vertices) {
                    dfs(matrix, start, visited);
                } else {
                    printf("Invalid input. Please enter a valid starting vertex.\n");
                }
                break;
            case 3:
                printGraph(matrix);
                break;
            case 4:
                break;
            default:
                printf("Invalid choice. Please enter a valid choice.\n");
        }
    } while (ch != 4);

    return 0;
}
