#include <stdio.h>

#define MAX_SIZE 10

struct Queue {
    int arr[MAX_SIZE];
    int front, rear;
};

void initializeQueue(struct Queue *queue) {
    queue->front = -1;
    queue->rear = -1;
}

int isFullQueue(struct Queue *queue) {
    return (queue->rear == MAX_SIZE - 1 && queue->front == 0) || (queue->rear + 1 == queue->front);
}

int isEmptyQueue(struct Queue *queue) {
    return queue->front == -1;
}

void enqueue(struct Queue *queue, int value) {
    if (isFullQueue(queue)) {
        printf("Queue Overflow: Cannot enqueue %d, queue is full.\n", value);
    } else {
        if (isEmptyQueue(queue)) {
            queue->front = 0; // Initialize front if the queue is empty
        }
        queue->rear = (queue->rear + 1) % MAX_SIZE;
        queue->arr[queue->rear] = value;
        printf("Enqueued %d into the queue.\n", value);
    }
}

int dequeue(struct Queue *queue) {
    if (isEmptyQueue(queue)) {
        printf("Queue Underflow: Cannot dequeue from an empty queue.\n");
        return -1; // Indicates an error or empty queue
    } else {
        int dequeuedValue = queue->arr[queue->front];
        if (queue->front == queue->rear) {
            // If there's only one element in the queue, reset front and rear
            queue->front = -1;
            queue->rear = -1;
        } else {
            queue->front = (queue->front + 1) % MAX_SIZE;
        }
        printf("Dequeued %d from the queue.\n", dequeuedValue);
        return dequeuedValue;
    }
}

int main() {
    struct Queue myQueue;
    initializeQueue(&myQueue);

    enqueue(&myQueue, 10);
    enqueue(&myQueue, 20);
    enqueue(&myQueue, 30);

    dequeue(&myQueue);
    dequeue(&myQueue);
    dequeue(&myQueue);

    return 0;
}
