#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 5

struct CircularQueue {
    int front, rear;
    int array[MAX_SIZE];
};

void initializeQueue(struct CircularQueue *queue) {
    queue->front = -1;
    queue->rear = -1;
}

int isFull(struct CircularQueue *queue) {
    return (queue->front == 0 && queue->rear == MAX_SIZE - 1) || (queue->front == queue->rear + 1);
}

int isEmpty(struct CircularQueue *queue) {
    return queue->front == -1;
}

void enqueue(struct CircularQueue *queue, int value) {
    if (isFull(queue)) {
        printf("Queue is full. Cannot enqueue %d.\n", value);
        return;
    }

    if (isEmpty(queue))
        queue->front = queue->rear = 0;
    else if (queue->rear == MAX_SIZE - 1)
        queue->rear = 0;
    else
        queue->rear++;

    queue->array[queue->rear] = value;
    printf("Enqueued %d into the queue.\n", value);
}

int dequeue(struct CircularQueue *queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty. Cannot dequeue.\n");
        return -1; // Indicates an error or empty queue
    }

    int dequeuedValue = queue->array[queue->front];

    if (queue->front == queue->rear)
        queue->front = queue->rear = -1;
    else if (queue->front == MAX_SIZE - 1)
        queue->front = 0;
    else
        queue->front++;

    printf("Dequeued %d from the queue.\n", dequeuedValue);
    return dequeuedValue;
}

void display(struct CircularQueue *queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty.\n");
        return;
    }

    printf("Queue elements: ");
    int i;
    if (queue->front <= queue->rear) {
        for (i = queue->front; i <= queue->rear; i++)
            printf("%d ", queue->array[i]);
    } else {
        for (i = queue->front; i < MAX_SIZE; i++)
            printf("%d ", queue->array[i]);
        for (i = 0; i <= queue->rear; i++)
            printf("%d ", queue->array[i]);
    }
    printf("\n");
}

int main() {
    struct CircularQueue myQueue;
    initializeQueue(&myQueue);

    int choice, value;

    do {
        printf("\n1. Enqueue\n2. Dequeue\n3. Display\n0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to enqueue: ");
                scanf("%d", &value);
                enqueue(&myQueue, value);
                break;
            case 2:
                dequeue(&myQueue);
                break;
            case 3:
                display(&myQueue);
                break;
            case 0:
                break;
            default:
                printf("Invalid choice. Please enter a valid choice.\n");
        }
    } while (choice != 0);

    return 0;
}
